#4. Sample a new state value
eta.particles.new <- alpha.new * eta.particles[pos,i] + rnorm(num.particles,w.eta.new)
W.phi <- rnorm(num.particles,w.phi.new)
a.phi <- rep(-1,7)
a.phi[pos] = 6
W.phi.big <- W.phi %*% t(a.phi)
for (j in 1:7){
new.particles <- phi.particles[[j]][,i] + W.phi.big[,j]
assign(paste("phi.particle.new",j,sep=''),new.particles)
}
current.particle.state <- phi.particles[[pos]][,i] + W.phi.big[,pos]
#5. Evaluate Importance weight
delta.tilde <- exp(eta.particles.new + current.particle.state + gamma.new)
delta.hat <- exp(eta.plus[ints] + phi.plus[ints] + gamma.mt[ints])
log.w <- Y[i] * log(delta.tilde) - delta.tilde - Y[i] * log(delta.hat) + delta.hat
#6. Resample
new.pos <- sample(1:num.particles,num.particles,replace=T,prob=exp(log.w))
eta.particles[,(i+1)] <- eta.particles.new[new.pos]
phi.particles[[1]][,(i+1)] <- phi.particle.new1[new.pos]
phi.particles[[2]][,(i+1)] <- phi.particle.new2[new.pos]
phi.particles[[3]][,(i+1)] <- phi.particle.new3[new.pos]
phi.particles[[4]][,(i+1)] <- phi.particle.new4[new.pos]
phi.particles[[5]][,(i+1)] <- phi.particle.new5[new.pos]
phi.particles[[6]][,(i+1)] <- phi.particle.new6[new.pos]
phi.particles[[7]][,(i+1)] <- phi.particle.new7[new.pos]
alpha.particles[,(i+1)] <- alpha.new[new.pos]
gamma.particles[,(i+1)] <- gamma.new[new.pos]
w.eta.particles[,(i+1)] <- w.eta.new[new.pos]
w.phi.particles[,(i+1)] <- w.phi.new[new.pos]
}
eta.est <- apply(eta.particles[,2:337],2,mean)
eta.q <- apply(eta.particles,2,quantile, probs=c(.025,.975))
plot(eta.est,type='n', ylim=range(eta.q))
lines(1:336,eta,col='blue')
lines(1:336,eta.q[1,2:337],col='red',lty=2)
lines(1:336,eta.q[2,2:337],col='red',lty=2)
lines(1:336,eta.est[2:337],col='black')
w.eta.est <- apply(w.eta.particles[,2:337],2,mean)
w.eta.q <- apply(w.eta.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(w.eta.est,type='l',ylim=range(w.eta.q))
lines(1:336,w.eta.q[1,],col='red')
lines(1:336,w.eta.q[2,],col='red')
lines(1:336,rep(W_eta,336),col='blue')
w.phi.est <- apply(w.phi.particles[,2:337],2,mean)
w.phi.q <- apply(w.phi.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(w.phi.est,type='l',ylim=range(w.phi.q))
lines(1:336,w.phi.q[1,],col='red')
lines(1:336,w.phi.q[2,],col='red')
lines(1:336,rep(W_phi,336),col='blue')
gamma.est <- apply(gamma.particles[,2:337],2,mean)
gamma.q <- apply(gamma.particles[,2:337],2,quantile, probs=c(.025,.975))
lines(1:336,rep(W_phi,336),col='blue')
W_phi
gamma.est <- apply(gamma.particles[,2:337],2,mean)
gamma.q <- apply(gamma.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(gamma.est,type='l',ylim=range(gamma.q))
lines(1:336,gamma.q[1,],col='red')
lines(1:336,gamma.q[2,],col='red')
lines(1:336,rep(gamma,336),col='blue')
alpha.est <- apply(alpha.particles[,2:337],2,mean)
alpha.q <- apply(alpha.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(alpha.est,type='l',ylim=range(alpha.q))
lines(1:336,alpha.q[1,],col='red')
lines(1:336,alpha.q[2,],col='red')
lines(1:336,rep(alpha,336),col='blue')
daily.values <- matrix(0,nrow=num.particles,ncol=time_points)
for (j in 1:time_points){
pos = j%%7
if (pos ==0) pos=7
daily.values[,j] <- phi.particles[[pos]][,j] + alpha.particles[,j] * eta.particles[,j] + gamma.particles[,j]
}
Struct.est.mean <- apply(daily.values,2,mean)
Struct.est.quant <- apply(daily.values,2,quantile,probs=c(.025,.975))
plot(Struct.est.mean,type='l',ylim=range(Struct.est.quant))
lines(1:336,Struct,col='blue')
lines(1:336,Struct.est.quant[1,],lty=2,col='red')
lines(1:336,Struct.est.quant[2,],lty=2,col='red')
plot(exp(Struct.est.mean),type='l',ylim=range(exp(Struct.est.quant)))
lines(1:336,exp(Struct),col='blue')
lines(1:336,exp(Struct.est.quant[1,]),lty=2,col='red')
lines(1:336,exp(Struct.est.quant[2,]),lty=2,col='red')
cbind(exp(Struct), exp(Struct.est.mean), Y)
cbind((Struct),(Struct.est.mean), Y)
phi.particles[[pos]][,j]
w.phi.particles <- matrix(W_phi,nrow=num.particles,ncol=(time_points + 1))
delta <- .95
a <- (3 * delta - 1) / (2 * delta)
num.particles <- 10000
eta.particles <- matrix(rnorm(num.particles,0,5),nrow=num.particles,ncol=(time_points+1))
phi.particles = list(matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)),
matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)),
matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)),
matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)),
matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)),
matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)),
matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)))
alpha.particles <- matrix(runif(num.particles,-1,1),nrow=num.particles,ncol=(time_points + 1))
gamma.particles <- matrix(rnorm(num.particles,0,1),nrow=num.particles,ncol=(time_points + 1))
w.eta.particles <- matrix(rigamma(num.particles,2,1),nrow=num.particles,ncol=(time_points + 1))
w.phi.particles <- matrix(W_phi,nrow=num.particles,ncol=(time_points + 1))
#let theta = {alpha, theta, W_eta, W_phi}
for (i in 1:time_points){
# NOTE THE INDICIES OF THE PARTICLES ARE OFF FROM Y, AS THE PARTICLES ARE ONE ELEMENT LONGER
# THE FIRST ELEMENT OF THE PARTICLES CORRESPONDS TO T=0, so at time i we have p(x_{i-1}|y_{i-1})
#1. Prior point estimates
pos <- i %% 7
if (pos == 0) pos = 7
eta.plus <- alpha.particles[,i] * eta.particles[,i]
phi.plus <- phi.particles[[pos]][,i]
alpha.mt <- a * alpha.particles[,i] + (1-a) * mean(alpha.particles[,i])
gamma.mt <- a * gamma.particles[,i] + (1-a) * mean(gamma.particles[,i])
w.eta.mt <- a * w.eta.particles[,i] + (1-a) * mean(w.eta.particles[,i])
w.phi.mt <- a * w.phi.particles[,i] + (1-a) * mean(w.phi.particles[,i])
#2. Sample an Auxiliary Integer
delta <- exp( eta.plus + phi.plus + gamma.mt)
if (Y[i] > 0) {
log.g <- Y[i] * log(delta) - delta - sum(log(1:Y[i]))
} else {
log.g <- Y[i] * log(delta) - delta
}
ints <- sample(1:num.particles,num.particles,replace=T,prob = exp(log.g))
#3. Update Fixed Parameters
h.sq <- 1 - a^2
V.alpha <- var(alpha.particles[,i])
alpha.new <- alpha.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.alpha))
V.gamma <- var(gamma.particles[,i])
gamma.new <- gamma.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.gamma))
V.w.eta <- var(w.eta.particles[,i])
w.eta.new <- w.eta.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.w.eta))
#  V.w.phi <- var(w.phi.particles[,i])
#  w.phi.new <- w.phi.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.w.phi))
#4. Sample a new state value
eta.particles.new <- alpha.new * eta.particles[pos,i] + rnorm(num.particles,w.eta.new)
# W.phi <- rnorm(num.particles,w.phi.new)
W.phi <- rnorm(num.particles,W_phi)
a.phi <- rep(-1,7)
a.phi[pos] = 6
W.phi.big <- W.phi %*% t(a.phi)
for (j in 1:7){
new.particles <- phi.particles[[j]][,i] + W.phi.big[,j]
assign(paste("phi.particle.new",j,sep=''),new.particles)
}
current.particle.state <- phi.particles[[pos]][,i] + W.phi.big[,pos]
#5. Evaluate Importance weight
delta.tilde <- exp(eta.particles.new + current.particle.state + gamma.new)
delta.hat <- exp(eta.plus[ints] + phi.plus[ints] + gamma.mt[ints])
log.w <- Y[i] * log(delta.tilde) - delta.tilde - Y[i] * log(delta.hat) + delta.hat
#6. Resample
new.pos <- sample(1:num.particles,num.particles,replace=T,prob=exp(log.w))
eta.particles[,(i+1)] <- eta.particles.new[new.pos]
phi.particles[[1]][,(i+1)] <- phi.particle.new1[new.pos]
phi.particles[[2]][,(i+1)] <- phi.particle.new2[new.pos]
phi.particles[[3]][,(i+1)] <- phi.particle.new3[new.pos]
phi.particles[[4]][,(i+1)] <- phi.particle.new4[new.pos]
phi.particles[[5]][,(i+1)] <- phi.particle.new5[new.pos]
phi.particles[[6]][,(i+1)] <- phi.particle.new6[new.pos]
phi.particles[[7]][,(i+1)] <- phi.particle.new7[new.pos]
alpha.particles[,(i+1)] <- alpha.new[new.pos]
gamma.particles[,(i+1)] <- gamma.new[new.pos]
w.eta.particles[,(i+1)] <- w.eta.new[new.pos]
w.phi.particles[,(i+1)] <- w.phi.new[new.pos]
}
eta.est <- apply(eta.particles[,2:337],2,mean)
eta.q <- apply(eta.particles,2,quantile, probs=c(.025,.975))
plot(eta.est,type='n', ylim=range(eta.q))
lines(1:336,eta,col='blue')
lines(1:336,eta.q[1,2:337],col='red',lty=2)
lines(1:336,eta.q[2,2:337],col='red',lty=2)
lines(1:336,eta.est[2:337],col='black')
w.eta.est <- apply(w.eta.particles[,2:337],2,mean)
w.eta.q <- apply(w.eta.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(w.eta.est,type='l',ylim=range(w.eta.q))
lines(1:336,w.eta.q[1,],col='red')
lines(1:336,w.eta.q[2,],col='red')
lines(1:336,rep(W_eta,336),col='blue')
w.phi.est <- apply(w.phi.particles[,2:337],2,mean)
w.phi.q <- apply(w.phi.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(w.phi.est,type='l',ylim=range(w.phi.q))
lines(1:336,w.phi.q[1,],col='red')
lines(1:336,w.phi.q[2,],col='red')
lines(1:336,rep(W_phi,336),col='blue')
gamma.est <- apply(gamma.particles[,2:337],2,mean)
gamma.q <- apply(gamma.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(gamma.est,type='l',ylim=range(gamma.q))
lines(1:336,gamma.q[1,],col='red')
lines(1:336,gamma.q[2,],col='red')
lines(1:336,rep(gamma,336),col='blue')
alpha.est <- apply(alpha.particles[,2:337],2,mean)
alpha.q <- apply(alpha.particles[,2:337],2,quantile, probs=c(.025,.975))
W_eta
delta <- .95
a <- (3 * delta - 1) / (2 * delta)
num.particles <- 10000
eta.particles <- matrix(rnorm(num.particles,0,5),nrow=num.particles,ncol=(time_points+1))
phi.particles = list(matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)),
matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)),
matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)),
matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)),
matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)),
matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)),
matrix(rnorm(num.particles * (time_points+1),0,1),nrow=num.particles,ncol=(time_points+1)))
alpha.particles <- matrix(runif(num.particles,-1,1),nrow=num.particles,ncol=(time_points + 1))
gamma.particles <- matrix(rnorm(num.particles,0,1),nrow=num.particles,ncol=(time_points + 1))
w.eta.particles <- matrix(rigamma(num.particles,2,1),nrow=num.particles,ncol=(time_points + 1))
w.phi.particles <- matrix(W_phi,nrow=num.particles,ncol=(time_points + 1))
#let theta = {alpha, theta, W_eta, W_phi}
for (i in 1:time_points){
# NOTE THE INDICIES OF THE PARTICLES ARE OFF FROM Y, AS THE PARTICLES ARE ONE ELEMENT LONGER
# THE FIRST ELEMENT OF THE PARTICLES CORRESPONDS TO T=0, so at time i we have p(x_{i-1}|y_{i-1})
#1. Prior point estimates
pos <- i %% 7
if (pos == 0) pos = 7
eta.plus <- alpha.particles[,i] * eta.particles[,i]
phi.plus <- phi.particles[[pos]][,i]
alpha.mt <- a * alpha.particles[,i] + (1-a) * mean(alpha.particles[,i])
gamma.mt <- a * gamma.particles[,i] + (1-a) * mean(gamma.particles[,i])
w.eta.mt <- a * w.eta.particles[,i] + (1-a) * mean(w.eta.particles[,i])
w.phi.mt <- a * w.phi.particles[,i] + (1-a) * mean(w.phi.particles[,i])
#2. Sample an Auxiliary Integer
delta <- exp( eta.plus + phi.plus + gamma.mt)
if (Y[i] > 0) {
log.g <- Y[i] * log(delta) - delta - sum(log(1:Y[i]))
} else {
log.g <- Y[i] * log(delta) - delta
}
ints <- sample(1:num.particles,num.particles,replace=T,prob = exp(log.g))
#3. Update Fixed Parameters
h.sq <- 1 - a^2
V.alpha <- var(alpha.particles[,i])
alpha.new <- alpha.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.alpha))
V.gamma <- var(gamma.particles[,i])
gamma.new <- gamma.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.gamma))
# V.w.eta <- var(w.eta.particles[,i])
#  w.eta.new <- w.eta.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.w.eta))
#  V.w.phi <- var(w.phi.particles[,i])
#  w.phi.new <- w.phi.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.w.phi))
#4. Sample a new state value
#  eta.particles.new <- alpha.new * eta.particles[pos,i] + rnorm(num.particles,w.eta.new)
eta.particles.new <- alpha.new * eta.particles[pos,i] + rnorm(num.particles,W_eta)
# W.phi <- rnorm(num.particles,w.phi.new)
W.phi <- rnorm(num.particles,W_phi)
a.phi <- rep(-1,7)
a.phi[pos] = 6
W.phi.big <- W.phi %*% t(a.phi)
for (j in 1:7){
new.particles <- phi.particles[[j]][,i] + W.phi.big[,j]
assign(paste("phi.particle.new",j,sep=''),new.particles)
}
current.particle.state <- phi.particles[[pos]][,i] + W.phi.big[,pos]
#5. Evaluate Importance weight
delta.tilde <- exp(eta.particles.new + current.particle.state + gamma.new)
delta.hat <- exp(eta.plus[ints] + phi.plus[ints] + gamma.mt[ints])
log.w <- Y[i] * log(delta.tilde) - delta.tilde - Y[i] * log(delta.hat) + delta.hat
#6. Resample
new.pos <- sample(1:num.particles,num.particles,replace=T,prob=exp(log.w))
eta.particles[,(i+1)] <- eta.particles.new[new.pos]
phi.particles[[1]][,(i+1)] <- phi.particle.new1[new.pos]
phi.particles[[2]][,(i+1)] <- phi.particle.new2[new.pos]
phi.particles[[3]][,(i+1)] <- phi.particle.new3[new.pos]
phi.particles[[4]][,(i+1)] <- phi.particle.new4[new.pos]
phi.particles[[5]][,(i+1)] <- phi.particle.new5[new.pos]
phi.particles[[6]][,(i+1)] <- phi.particle.new6[new.pos]
phi.particles[[7]][,(i+1)] <- phi.particle.new7[new.pos]
alpha.particles[,(i+1)] <- alpha.new[new.pos]
gamma.particles[,(i+1)] <- gamma.new[new.pos]
w.eta.particles[,(i+1)] <- w.eta.new[new.pos]
w.phi.particles[,(i+1)] <- w.phi.new[new.pos]
}
eta.est <- apply(eta.particles[,2:337],2,mean)
eta.q <- apply(eta.particles,2,quantile, probs=c(.025,.975))
plot(eta.est,type='n', ylim=range(eta.q))
lines(1:336,eta,col='blue')
lines(1:336,eta.q[1,2:337],col='red',lty=2)
lines(1:336,eta.q[2,2:337],col='red',lty=2)
lines(1:336,eta.est[2:337],col='black')
w.eta.est <- apply(w.eta.particles[,2:337],2,mean)
w.eta.q <- apply(w.eta.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(w.eta.est,type='l',ylim=range(w.eta.q))
lines(1:336,w.eta.q[1,],col='red')
lines(1:336,w.eta.q[2,],col='red')
lines(1:336,rep(W_eta,336),col='blue')
w.phi.est <- apply(w.phi.particles[,2:337],2,mean)
w.phi.q <- apply(w.phi.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(w.phi.est,type='l',ylim=range(w.phi.q))
lines(1:336,w.phi.q[1,],col='red')
lines(1:336,w.phi.q[2,],col='red')
lines(1:336,rep(W_phi,336),col='blue')
gamma.est <- apply(gamma.particles[,2:337],2,mean)
gamma.q <- apply(gamma.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(gamma.est,type='l',ylim=range(gamma.q))
lines(1:336,gamma.q[1,],col='red')
lines(1:336,gamma.q[2,],col='red')
lines(1:336,rep(gamma,336),col='blue')
alpha.est <- apply(alpha.particles[,2:337],2,mean)
alpha.q <- apply(alpha.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(alpha.est,type='l',ylim=range(alpha.q))
lines(1:336,alpha.q[1,],col='red')
lines(1:336,alpha.q[2,],col='red')
gamma.mt <- 0
#let theta = {alpha, theta, W_eta, W_phi}
for (i in 1:time_points){
# NOTE THE INDICIES OF THE PARTICLES ARE OFF FROM Y, AS THE PARTICLES ARE ONE ELEMENT LONGER
# THE FIRST ELEMENT OF THE PARTICLES CORRESPONDS TO T=0, so at time i we have p(x_{i-1}|y_{i-1})
#1. Prior point estimates
pos <- i %% 7
if (pos == 0) pos = 7
eta.plus <- alpha.particles[,i] * eta.particles[,i]
phi.plus <- phi.particles[[pos]][,i]
alpha.mt <- a * alpha.particles[,i] + (1-a) * mean(alpha.particles[,i])
#  gamma.mt <- a * gamma.particles[,i] + (1-a) * mean(gamma.particles[,i])
gamma.mt <- 0
w.eta.mt <- a * w.eta.particles[,i] + (1-a) * mean(w.eta.particles[,i])
w.phi.mt <- a * w.phi.particles[,i] + (1-a) * mean(w.phi.particles[,i])
#2. Sample an Auxiliary Integer
delta <- exp( eta.plus + phi.plus + gamma.mt)
if (Y[i] > 0) {
log.g <- Y[i] * log(delta) - delta - sum(log(1:Y[i]))
} else {
log.g <- Y[i] * log(delta) - delta
}
ints <- sample(1:num.particles,num.particles,replace=T,prob = exp(log.g))
#3. Update Fixed Parameters
h.sq <- 1 - a^2
V.alpha <- var(alpha.particles[,i])
alpha.new <- alpha.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.alpha))
V.gamma <- var(gamma.particles[,i])
gamma.new <- gamma.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.gamma))
# V.w.eta <- var(w.eta.particles[,i])
#  w.eta.new <- w.eta.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.w.eta))
#  V.w.phi <- var(w.phi.particles[,i])
#  w.phi.new <- w.phi.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.w.phi))
#4. Sample a new state value
#  eta.particles.new <- alpha.new * eta.particles[pos,i] + rnorm(num.particles,w.eta.new)
eta.particles.new <- alpha.new * eta.particles[pos,i] + rnorm(num.particles,W_eta)
# W.phi <- rnorm(num.particles,w.phi.new)
W.phi <- rnorm(num.particles,W_phi)
a.phi <- rep(-1,7)
a.phi[pos] = 6
W.phi.big <- W.phi %*% t(a.phi)
for (j in 1:7){
new.particles <- phi.particles[[j]][,i] + W.phi.big[,j]
assign(paste("phi.particle.new",j,sep=''),new.particles)
}
current.particle.state <- phi.particles[[pos]][,i] + W.phi.big[,pos]
#5. Evaluate Importance weight
#delta.tilde <- exp(eta.particles.new + current.particle.state + gamma.new)
delta.tilde <- exp(eta.particles.new + current.particle.state)
#delta.hat <- exp(eta.plus[ints] + phi.plus[ints] + gamma.mt[ints])
delta.hat <- exp(eta.plus[ints] + phi.plus[ints])
log.w <- Y[i] * log(delta.tilde) - delta.tilde - Y[i] * log(delta.hat) + delta.hat
#6. Resample
new.pos <- sample(1:num.particles,num.particles,replace=T,prob=exp(log.w))
eta.particles[,(i+1)] <- eta.particles.new[new.pos]
phi.particles[[1]][,(i+1)] <- phi.particle.new1[new.pos]
phi.particles[[2]][,(i+1)] <- phi.particle.new2[new.pos]
phi.particles[[3]][,(i+1)] <- phi.particle.new3[new.pos]
phi.particles[[4]][,(i+1)] <- phi.particle.new4[new.pos]
phi.particles[[5]][,(i+1)] <- phi.particle.new5[new.pos]
phi.particles[[6]][,(i+1)] <- phi.particle.new6[new.pos]
phi.particles[[7]][,(i+1)] <- phi.particle.new7[new.pos]
alpha.particles[,(i+1)] <- alpha.new[new.pos]
gamma.particles[,(i+1)] <- gamma.new[new.pos]
w.eta.particles[,(i+1)] <- w.eta.new[new.pos]
w.phi.particles[,(i+1)] <- w.phi.new[new.pos]
}
warnings()
V.gamma
eta.est <- apply(eta.particles[,2:337],2,mean)
eta.q <- apply(eta.particles,2,quantile, probs=c(.025,.975))
plot(eta.est,type='n', ylim=range(eta.q))
lines(1:336,eta,col='blue')
lines(1:336,eta.q[1,2:337],col='red',lty=2)
lines(1:336,eta.q[2,2:337],col='red',lty=2)
lines(1:336,eta.est[2:337],col='black')
w.eta.est <- apply(w.eta.particles[,2:337],2,mean)
w.eta.q <- apply(w.eta.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(w.eta.est,type='l',ylim=range(w.eta.q))
lines(1:336,w.eta.q[1,],col='red')
lines(1:336,w.eta.q[2,],col='red')
lines(1:336,rep(W_eta,336),col='blue')
w.phi.est <- apply(w.phi.particles[,2:337],2,mean)
w.phi.q <- apply(w.phi.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(w.phi.est,type='l',ylim=range(w.phi.q))
lines(1:336,w.phi.q[1,],col='red')
lines(1:336,w.phi.q[2,],col='red')
lines(1:336,rep(W_phi,336),col='blue')
gamma.est <- apply(gamma.particles[,2:337],2,mean)
gamma.q <- apply(gamma.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(gamma.est,type='l',ylim=range(gamma.q))
lines(1:336,gamma.q[1,],col='red')
lines(1:336,gamma.q[2,],col='red')
lines(1:336,rep(gamma,336),col='blue')
alpha.est <- apply(alpha.particles[,2:337],2,mean)
alpha.q <- apply(alpha.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(alpha.est,type='l',ylim=range(alpha.q))
lines(1:336,alpha.q[1,],col='red')
lines(1:336,alpha.q[2,],col='red')
lines(1:336,rep(alpha,336),col='blue')
daily.values <- matrix(0,nrow=num.particles,ncol=time_points)
alpha.particles <- matrix(.5,nrow=num.particles,ncol=(time_points + 1))
alpha
#let theta = {alpha, theta, W_eta, W_phi}
for (i in 1:time_points){
# NOTE THE INDICIES OF THE PARTICLES ARE OFF FROM Y, AS THE PARTICLES ARE ONE ELEMENT LONGER
# THE FIRST ELEMENT OF THE PARTICLES CORRESPONDS TO T=0, so at time i we have p(x_{i-1}|y_{i-1})
#1. Prior point estimates
pos <- i %% 7
if (pos == 0) pos = 7
eta.plus <- alpha.particles[,i] * eta.particles[,i]
phi.plus <- phi.particles[[pos]][,i]
#  alpha.mt <- a * alpha.particles[,i] + (1-a) * mean(alpha.particles[,i])
alpha.mt <- .5
#  gamma.mt <- a * gamma.particles[,i] + (1-a) * mean(gamma.particles[,i])
gamma.mt <- 0
w.eta.mt <- a * w.eta.particles[,i] + (1-a) * mean(w.eta.particles[,i])
w.phi.mt <- a * w.phi.particles[,i] + (1-a) * mean(w.phi.particles[,i])
#2. Sample an Auxiliary Integer
delta <- exp( eta.plus + phi.plus + gamma.mt)
if (Y[i] > 0) {
log.g <- Y[i] * log(delta) - delta - sum(log(1:Y[i]))
} else {
log.g <- Y[i] * log(delta) - delta
}
ints <- sample(1:num.particles,num.particles,replace=T,prob = exp(log.g))
#3. Update Fixed Parameters
#  h.sq <- 1 - a^2
#  V.alpha <- var(alpha.particles[,i])
#  alpha.new <- alpha.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.alpha))
#  V.gamma <- var(gamma.particles[,i])
#  gamma.new <- gamma.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.gamma))
# V.w.eta <- var(w.eta.particles[,i])
#  w.eta.new <- w.eta.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.w.eta))
#  V.w.phi <- var(w.phi.particles[,i])
#  w.phi.new <- w.phi.mt[ints] + rnorm(num.particles,sd=sqrt(h.sq * V.w.phi))
#4. Sample a new state value
#  eta.particles.new <- alpha.new * eta.particles[pos,i] + rnorm(num.particles,w.eta.new)
#  eta.particles.new <- alpha.new * eta.particles[pos,i] + rnorm(num.particles,W_eta)
eta.particles.new <- alpha * eta.particles[pos,i] + rnorm(num.particles,W_eta)
# W.phi <- rnorm(num.particles,w.phi.new)
W.phi <- rnorm(num.particles,W_phi)
a.phi <- rep(-1,7)
a.phi[pos] = 6
W.phi.big <- W.phi %*% t(a.phi)
for (j in 1:7){
new.particles <- phi.particles[[j]][,i] + W.phi.big[,j]
assign(paste("phi.particle.new",j,sep=''),new.particles)
}
current.particle.state <- phi.particles[[pos]][,i] + W.phi.big[,pos]
#5. Evaluate Importance weight
#delta.tilde <- exp(eta.particles.new + current.particle.state + gamma.new)
delta.tilde <- exp(eta.particles.new + current.particle.state)
#delta.hat <- exp(eta.plus[ints] + phi.plus[ints] + gamma.mt[ints])
delta.hat <- exp(eta.plus[ints] + phi.plus[ints])
log.w <- Y[i] * log(delta.tilde) - delta.tilde - Y[i] * log(delta.hat) + delta.hat
#6. Resample
new.pos <- sample(1:num.particles,num.particles,replace=T,prob=exp(log.w))
eta.particles[,(i+1)] <- eta.particles.new[new.pos]
phi.particles[[1]][,(i+1)] <- phi.particle.new1[new.pos]
phi.particles[[2]][,(i+1)] <- phi.particle.new2[new.pos]
phi.particles[[3]][,(i+1)] <- phi.particle.new3[new.pos]
phi.particles[[4]][,(i+1)] <- phi.particle.new4[new.pos]
phi.particles[[5]][,(i+1)] <- phi.particle.new5[new.pos]
phi.particles[[6]][,(i+1)] <- phi.particle.new6[new.pos]
phi.particles[[7]][,(i+1)] <- phi.particle.new7[new.pos]
alpha.particles[,(i+1)] <- alpha.new[new.pos]
gamma.particles[,(i+1)] <- gamma.new[new.pos]
w.eta.particles[,(i+1)] <- w.eta.new[new.pos]
w.phi.particles[,(i+1)] <- w.phi.new[new.pos]
}
eta.est <- apply(eta.particles[,2:337],2,mean)
eta.q <- apply(eta.particles,2,quantile, probs=c(.025,.975))
plot(eta.est,type='n', ylim=range(eta.q))
lines(1:336,eta,col='blue')
lines(1:336,eta.q[1,2:337],col='red',lty=2)
lines(1:336,eta.q[2,2:337],col='red',lty=2)
lines(1:336,eta.est[2:337],col='black')
w.eta.est <- apply(w.eta.particles[,2:337],2,mean)
w.eta.q <- apply(w.eta.particles[,2:337],2,quantile, probs=c(.025,.975))
plot(w.eta.est,type='l',ylim=range(w.eta.q))
lines(1:336,w.eta.q[1,],col='red')
lines(1:336,w.eta.q[2,],col='red')
daily.values <- matrix(0,nrow=num.particles,ncol=time_points)
for (j in 1:time_points){
pos = j%%7
if (pos ==0) pos=7
daily.values[,j] <- phi.particles[[pos]][,j] + alpha.particles[,j] * eta.particles[,j] + gamma.particles[,j]
}
Struct.est.mean <- apply(daily.values,2,mean)
Struct.est.quant <- apply(daily.values,2,quantile,probs=c(.025,.975))
plot(Struct.est.mean,type='l',ylim=range(Struct.est.quant))
daily.values <- matrix(0,nrow=num.particles,ncol=time_points)
for (j in 1:time_points){
pos = j%%7
if (pos ==0) pos=7
#  daily.values[,j] <- phi.particles[[pos]][,j] + alpha.particles[,j] * eta.particles[,j] + gamma.particles[,j]
daily.values[,j] <- phi.particles[[pos]][,j] + alpha * eta.particles[,j]
}
Struct.est.mean <- apply(daily.values,2,mean)
Struct.est.quant <- apply(daily.values,2,quantile,probs=c(.025,.975))
plot(Struct.est.mean,type='l',ylim=range(Struct.est.quant))
lines(1:336,Struct,col='blue')
lines(1:336,Struct.est.quant[1,],lty=2,col='red')
lines(1:336,Struct.est.quant[2,],lty=2,col='red')
plot(exp(Struct.est.mean),type='l',ylim=range(exp(Struct.est.quant)))
plot(Struct.est.mean,type='l',ylim=range(Struct.est.quant))
lines(1:336,Struct,col='blue')
lines(1:336,Struct.est.quant[1,],lty=2,col='red')
lines(1:336,Struct.est.quant[2,],lty=2,col='red')
setwd("~/NCAA")
bball <- read.csv('~/NCAA/regular_season_results.csv')
head(bball)
tail(bball)
